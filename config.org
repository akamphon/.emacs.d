#+AUTHOR: Sup Akamphon
#+TITLE: DT's GNU Emacs Config
#+DESCRIPTION: personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: num:nil ^:{}

** Setting up straight.el

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** Org 
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0
    org-highlight-latex-and-related '(native script entities))
  (add-hook 'org-mode-hook #'visual-line-mode)
)
(use-package org-contrib)
(use-package org-superstar
  :straight (org-superstar
    :host github
    :repo "integral-dw/org-superstar-mode")
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
)
#+END_SRC

** *NOT* setting up package.el

#+BEGIN_SRC emacs-lisp
;; ;;(add-to-list 'load-path "/usr/share/emacs/site-lisp")
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
;; ;; Set up package.el to work with MELPA
;; (require 'package)
;; (add-to-list 'package-archives
;;              '("melpa" . "https://melpa.org/packages/"))
;; ;;(package-initialize)
;; ;;(package-refresh-contents)
;; ;; ensure the packages are installed
;; (setq use-package-always-ensure t)
#+END_SRC

** Enable Evil

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
)

(use-package evil-collection
:config
(evil-collection-init)
)

(use-package evil-surround
  :config
  (global-evil-surround-mode 1)
)

(use-package evil-snipe
  :commands evil-snipe-local-mode evil-snipe-override-local-mode
  :hook (doom-first-input . evil-snipe-override-mode)
  :hook (doom-first-input . evil-snipe-mode)
  :init
  (setq evil-snipe-smart-case t
        evil-snipe-scope 'line
        evil-snipe-repeat-scope 'visible
        evil-snipe-char-fold t)
)

#+END_SRC

** Tuning emacs's (or is it emacs') performance

#+BEGIN_SRC emacs-lisp
;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-erros nil)

(use-package doom-themes
:config
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(load-theme 'doom-one t)
)

(use-package dashboard
:init      ;; tweak dashboard config before loading it
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
(setq dashboard-banner-logo-title "Dorkmacs")
(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
(setq dashboard-center-content nil) ;; set to 't' for centered content
(setq dashboard-items '((recents . 5)
   		     (agenda . 5 )))
:config
(dashboard-setup-startup-hook)
(dashboard-modify-heading-icons '((recents . "file-text")
   			 (bookmarks . "book"))))

(use-package all-the-icons
:ensure t
)
#+END_SRC

** Smartparens

For parentheses and paired up things.

#+BEGIN_SRC emacs-lisp
(use-package smartparens)
(require 'smartparens-config)
#+END_SRC

** Which-key

Letting me know which keys do what.

#+BEGIN_SRC emacs-lisp
 (use-package which-key
   :init
   (setq which-key-side-window-location 'bottom
         which-key-sort-order #'which-key-key-order-alpha
         which-key-sort-uppercase-first nil
         which-key-add-column-padding 1
         which-key-max-display-columns nil
         which-key-min-display-lines 6
         which-key-side-window-slot -10
         which-key-side-window-max-height 0.25
         which-key-idle-delay 0.8
         which-key-max-description-length 25
         which-key-allow-imprecise-window-fit t
         which-key-separator " â†’ " )
   :config
   (which-key-mode)
)
#+END_SRC

** Ui Settings

Get rid of menu, tool, and scroll bars.

#+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 (scroll-bar-mode -1)
#+END_SRC

** General Keybindings

File manager, accessing email, bla bla bla

#+BEGIN_SRC emacs-lisp
 (use-package general
   :config
   (general-evil-setup t))

 (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
        "."     '(find-file :which-key "Find file")
        "f f"   '(find-file :which-key "Find file")
        "f r"   '(consult-recent-file :which-key "Recent files")
        "f s"   '(save-buffer :which-key "Save file")
        "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
        "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
        "f C"   '(copy-file :which-key "Copy file")
        "f D"   '(delete-file :which-key "Delete file")
        "f R"   '(rename-file :which-key "Rename file")
        "f S"   '(write-file :which-key "Save file as...")
        "f U"   '(sudo-edit :which-key "Sudo edit file")
        "o m"   '(mu4e :which-key "mu4e mode")
        "b b"   '(consult-buffer :which-key "Switch Buffer")
)

 (general-nmap org-mode-map ", e" '(org-export-dispatch :which-key "Org Export Dispatch"))
 (general-nmap org-mode-map ", x" '(org-toggle-checkbox :which-key "Org Toggle Checkbox"))
 (general-nmap org-mode-map ", p" '(org-latex-export-to-pdf :which-key "Org export latex buffer to pdf"))
 (general-nmap org-mode-map ", P" '(org-beamer-export-to-pdf :which-key "Org export beamer buffer to pdf"))
#+END_SRC

** Completion?

I need to learn more about this. Doesn't really work properly yet.

#+BEGIN_SRC emacs-lisp
(use-package vertico
:init
(vertico-mode)
)

;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
)

(use-package marginalia
  :config
  (marginalia-mode))

(use-package embark

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-exclude-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+END_SRC

** Git Settings

#+BEGIN_SRC emacs-lisp
 (use-package magit)
#+END_SRC

** Email Settings

#+BEGIN_SRC emacs-lisp
 (require 'smtpmail)
 (setq message-send-mail-function 'smtpmail-send-it
       smtpmail-smtp-user "sup@engr.tu.ac.th"
       user-full-name "Sappinandana Akamphon"
       user-mail-address "sup@engr.tu.ac.th"
       smtpmail-default-smtp-server "smtp.gmail.com"
       smtpmail-smtp-server "smtp.gmail.com"
       smtpmail-smtp-service 587
)

 (use-package pinentry)

 (straight-use-package '(mu4e :host github :repo "emacsmirror/mu4e" :files (:defaults "mu4e/*.el")))

 (with-eval-after-load "mu4e"
   (setq mu4e-get-mail-command (format "INSIDE_EMACS=%s mbsync -a" emacs-version)
         epa-pinentry-mode 'ask)
   (pinentry-start)
   (setq mu4e-confirm-quit nil
         mu4e-compose-context-policy 'always-ask)
)
#+END_SRC

** Font Settings

#+BEGIN_SRC emacs-lisp
(set-fontset-font t 'thai "Loma-11")
(set-face-attribute 'default nil
  :font "Source Code Pro"
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Source Code Pro"
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "Source Code Pro"
  :weight 'medium)
#+END_SRC

** Latex Settings
#+BEGIN_SRC emacs-lisp
(use-package tex
  :straight auctex
  :config
  (add-hook 'latex-mode-hook #'visual-line-mode)
(general-nmap LaTeX-mode-map ", a" '(TeX-command-run-all :which-key "TeX-command-run-all"))
(general-nmap LaTeX-mode-map ", b" '(latex/build :which-key "Build with LatexMk"))
(general-nmap LaTeX-mode-map ", v" '(TeX-view :which-key "View"))
(general-nmap LaTeX-mode-map ", e" '(LaTeX-environment :which-key "LaTeX-environment"))
(setq latex-build-command "LatexMk")
(defun latex/build ()
  (interactive)
  (progn
    (let ((TeX-save-query nil))
      (TeX-save-document (TeX-master-file)))
    (TeX-command TeX-command-default 'TeX-master-file -1)
      )
    )
)

#+END_SRC

** Bibliography Packages

#+BEGIN_SRC emacs-lisp
(use-package citar
:config
(setq org-cite-insert-processor 'citar
      org-cite-follow-processor 'citar
      org-cite-activate-processor 'citar)
)
(use-package citar-embark)
(use-package parsebib)
(use-package citeproc)
#+END_SRC

** Line + Word Wrap

#+BEGIN_SRC emacs-lisp
;;(use-package adaptive-wrap)
;;(global-visual-line-mode)
#+END_SRC
